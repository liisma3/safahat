import { useState, useEffect } from 'react';

// ----------------------------------------------------------------------

export default function useLocalStorage<ValueType>(key: string, defaultValue: ValueType) {
    const [value, setValue] = useState(() => {
        if (typeof window !== "undefined") {
            let storedValue = window?.localStorage?.getItem(key);
            if (typeof storedValue === 'undefined') {
                storedValue = '{}'
            }

            return storedValue === null ? defaultValue : JSON.parse(storedValue);
        }
    });
    useEffect(() => {
        const listener = (e: StorageEvent) => {
            if (e.storageArea === localStorage && e.key === key) {
                setValue(e.newValue ? JSON.parse(e.newValue) : e.newValue);
            }
        };
        window.addEventListener('storage', listener);

        return () => {
            window.removeEventListener('storage', listener);
        };
    }, [key, defaultValue]);
    useEffect(() => {
        console.log({ value })
    }, [value])

    const setValueInLocalStorage = (newValue: ValueType) => {
        setValue((value: any) => {
            const result = typeof newValue === 'function' ? newValue(currentValue) : newValue;
            console.log({ newValue })
            console.log({ value })
            console.log({ result })
            localStorage.setItem(key, JSON.stringify([...result]));
            return newValue;
        });
    };

    return [value, setValueInLocalStorage];
}
